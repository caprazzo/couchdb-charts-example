Type: Blog Post (Markdown)
Blog: example
Link: http://caprazzi.net/?p=272
Post: 272
Title: generating SVG charts with couchdb
Slug: charting-data-with-couchdb
Status: draft
Date: 2009-12-08 14:28:43 +0000
Pings: On
Comments: On
Category: Uncategorized

CouchDB <a title="List functions chapter in The Definitive Guide" href="http://books.couchdb.org/relax/design-documents/lists">list functions</a> allow you to render the output of view queries in any format, so it should be possible to generate some charts using SVG, an xml-based vector graphics language.

I'll try to render use a list function to render a SVG chart!
<div class="xbox">[DRAFT]<small><em><a href="http://couchdb.apache.org/">Apache CouchDB</a> is a document-oriented database that can be queried and indexed in a MapReduce fashion
using JavaScript. CouchDB also offers incremental replication with bi-directional conflict detection and resolution. </em></small></div>
<h2>Generate some test data</h2>
To get started with this exploration we need some data to render, and a quick way to
visualize it before our application is ready. This Python script generates a series of data points
that simulate the goings of someone's bank account.
<pre class="code"><code class="python"># test_data.py. Usage: python test_data.py &lt;simulation_length&gt;
import sys
import random

days = int(sys.argv[1])
savings = 10000
pay = 2000
for i in range(0, days):
	if ( i%30 == 0):
		savings = savings + pay
	savings = savings - random.randint(0, pay/16) - 2
	print i, (int(savings))
</code></pre>
Use the script to generate a sample set with 3000 points:
<pre class="term">$ python test_data.py 3000 &gt; test_data.txt
$ cat test_data.txt
0 11947
1 11882
2 11813
3 11790
4 11775
...</pre>
Our final output will be similar to a line chart made with some bash and <em>gnuplot</em>:
<pre class="code"><code class="bash">#!/bin/sh
# gnuplot.sh generates a plot of a series piped in stdin
(echo -e "set terminal png size 750, 500\nplot \"-\" using 1:2 with lines notitle"
cat -
echo -e "end") | gnuplot</code></pre>
<pre class="term">$ cat test_data.txt | sh gnuplot.sh &gt; <a style="text-decoration:underline" href="http://caprazzi.net/wp-content/uploads/2009/12/test_data.png">test_data.png</a></pre>
<h2>Upload test data data to couchdb</h2>
We need our data in json format so that it can be uploaded to couchdb. This python scripts converts
each input line to a json object. Each object will become a document in couchdb. All lines are collected in the 'docs' array, to make the output compatible with <a href="http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API">couchdb bulk document api.</a> It also adds a tag to each document, so it's easier to upload and manage multiple datasets.
<pre class="code"><code class="python"># data_to_json.py. builds json output suitable for couchdb bulk operations
import sys
import datetime
date = datetime.datetime(2000, 01, 01)
tag = sys.argv[1]
print '{"docs":['
for line in sys.stdin:
	day, value = line.strip().split(' ')
	datestr = (date + datetime.timedelta(int(day))).strftime("%Y-%m-%d")
	if (day &lt;&gt; "0"): print ","
	sys.stdout.write('{"tag":"%s", "date":"%s", "amount":%s}'%(tag, datestr, value)),
print '\n]}',</code></pre>
<pre class="term">$ cat test_data.txt | python data_to_json.py <strong>test-data</strong> &gt; test_data.json
$ cat test_data.json
<strong>{"docs":[</strong>
{<strong>"tag":"test-data"</strong>, "date":"2000-01-01", "amount":11896},
{"tag":"test-data", "date":"2000-01-02", "amount":11876},
....
{"tag":"test-data", "date":"2008-03-17", "amount":18703},
{"tag":"test-data", "date":"2008-03-18", "amount":18643}
]}</pre>
Create a new database with name svg-charts-demo
<pre class="term">$ curl -i -X PUT http://localhost:5984/svg-charts-demo/
HTTP/1.1 201 Created
...
{"ok":true}</pre>
Upload the test data
<pre class="term">$ curl -i -d @test_data.json -X POST http://localhost:5984/svg-charts-demo/_bulk_docs
HTTP/1.1 100 Continue

HTTP/1.1 201 Created
....</pre>
Verify that 3000 documents are in the database.
<pre class="term">$ curl http://localhost:5984/svg-charts-demo/_all_docs?limit=0
{"total_rows":3000,"offset":3000,"rows":[]}</pre>
<h2>Create and manage a design document with couchapp</h2>
<a title="design documents chapter on the Definitive Guide" href="http://books.couchdb.org/relax/design-documents/design-documents">Design documents</a> are special couchdb documents that contain application code such as views and lists.
<a href="http://wiki.github.com/couchapp/couchapp">CouchApp</a> is a set of scripts that makes it easy to create and manage design documents.

In most cases installing couchapp is matter of one command. If you have any problems or want to know more, visit <a href="http://books.couchdb.org/relax/example-app/design-documents">Managing Design Documents</a> on the Definitive Guide.
<pre class="term">$ easy_install -U couchapp</pre>
This command creates a new couchapp called svg-charts and installs it in couchdb
<pre class="term">$ couchapp generate svg-charts

$ ls svg-charts/
_attachments  _id  couchapp.json  lists  shows  updates  vendor  views

$ couchapp push svg-charts http://localhost:5984/svg-charts-demo/
[INFO] Visit your CouchApp here:
http://localhost:5984/svg-charts-demo/_design/svg-charts/index.html</pre>
<h2>Write a simple view with map/reduce</h2>
This view will enable us to group the test data year, month or day and see the average
for each group.
<pre class="code"><code class="javascript">// map.js
// key is array representing a date [year][month][day]
// value is each doc amount field (a number)
function(doc) {
	// dates are stored in the doc as 'yyyy-mm-dd'
	emit(doc.date.split('-'), doc.amount);
}</code></pre>
<pre class="code"><code class="javascript">// reduce.js
// this reduce function returns an array of objects
// {tot:total_value_for_group, count:elements_in_the_group}
// clients can than do tot/count to get the average for the group
// Keys are arrays [year][month][day], so count will always be 1 when group_level=3
function(keys, values, rereduce) {
	if (rereduce) {
		var result = {tot:0, count:0};
		for (var idx in values) {
			result.tot += values[idx].tot;
			result.count += values[idx].count;
		}
		return result;
	}
	else {
		var result = {tot:sum(values), count:values.length};
		return result;
	}
}
</code></pre>
Update the design document and test the different groupings
<pre class="term">$ couchapp push svg-charts http://localhost:5984/svg-charts-demo/</pre>
Call the view with group_level=1 to get the data grouped by year
<pre class="term">$ curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?<strong>group_level=1</strong>
{"rows":[
{"key":<strong>["2000"]</strong>,"value":{"tot":4247068,"count":366}},
...
{"key":<strong>["2008"]</strong>,"value":{"tot":1529286,"count":78}}
]}</pre>
Call the view with roup_level=2 to get the data grouped by month
<pre class="term">$ curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?<strong>group_level=2</strong>
{"rows":[
{"key":<strong>["2000","01"]</strong>,"value":{"tot":343578,"count":31}},
{"key":<strong>["2000","06"]</strong>,"value":{"tot":345282,"count":30}},
...</pre>
Call the view with roup_level=3 to get the data grouped by day. As all the keys are different at the third level, this returns a single row for each document.
<pre class="term">$ curl -s http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?<strong>group_level=3</strong>
{"rows":[
{"key":<strong>["2000","01","01"]</strong>,"value":{"tot":11896,"count":1}},
{"key":<strong>["2000","01","04"]</strong>,"value":{"tot":11747,"count":1}},
...</pre>
Same as above but limiting the response to a range of days
<pre class="term">$ curl -s 'http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?group_level=3
&amp;startkey=\<strong>["2008","01","01"\]</strong>&amp;endkey=\<strong>["2008","01","04"\]</strong>'
{"rows":[
{"key":<strong>["2008","01","01"]</strong>,"value":{"tot":20050,"count":1}},
{"key":["2008","01","02"],"value":{"tot":20019,"count":1}},
{"key":["2008","01","03"],"value":{"tot":19974,"count":1}},
{"key":<strong>["2008","01","04"]</strong>,"value":{"tot":19878,"count":1}}
]}</pre>
<h2>And finally, some SVG output with a list!</h2>

<pre class="code"><code class="javascript">function(head, req) {
	start({&quot;headers&quot;:{&quot;Content-Type&quot; : &quot;image/svg+xml&quot;}});
	
	// some utility functions that print svg elements
	function svg(width, height) {
		return &#x27;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&#x27;+
		&#x27; style=&quot;fill:black&quot;&#x27;+
		&#x27; width=&quot;&#x27;+width+&#x27;&quot; height=&quot;&#x27;+height+&#x27;&quot;&gt;\n&#x27;;
	}
	function line(x1, y1, x2, y2, color) {
		return &#x27;&lt;line x1=&quot;&#x27;+x1+&#x27;&quot; y1=&quot;&#x27;+y1+&#x27;&quot; x2=&quot;&#x27;+x2+&#x27;&quot; y2=&quot;&#x27;+y2+&#x27;&quot; style=&quot;stroke-width: 0.2; stroke:&#x27;+color+&#x27;&quot;/&gt;\n&#x27;;
	}
	function rect(x, y, width, height, color, fill) {
		return &#x27;&lt;rect x=&quot;&#x27;+x+&#x27;&quot; y=&quot;&#x27;+y+&#x27;&quot; width=&quot;&#x27;+width+&#x27;&quot; height=&quot;&#x27;+height+&#x27;&quot; style=&quot;fill:&#x27;+fill+&#x27;; stroke:&#x27;+color+&#x27;&quot;/&gt;\n&#x27;;
	}
	function text(x,y, text) {
		return &#x27;&lt;text x=&quot;&#x27;+x+&#x27;&quot; y=&quot;&#x27;+y+&#x27;&quot; font-size=&quot;11&quot; font-family=&quot;sans-serif&quot;&gt;&#x27;+text+&#x27;&lt;/text&gt;\n&#x27;;
	}
	
	// import query parameters
	var x_size = req.query.width || 750;
	var y_size = req.query.height || 500;
	var level = parseInt(req.query.group_level);
	
	// find max and min values
	// collect values and labels
	var y_max = null;
	var y_min = null;
	var values = [];
	var labels = [];
	var count = 0;
	while(row = getRow()) {		
		var value = Math.ceil(row.value.tot/row.value.count);
		if (y_max==null || value&gt;y_max) { y_max=value; }
		if (y_min==null || value&lt;y_min) { y_min=value; }
		values[count] = value;
		labels[count] = row.key.join(&#x27;-&#x27;);
		count++;
	}
	// calculate scalig factors
	var in_width = x_size-(2*pad);
	var in_height = y_size-(2*pad);
	var in_x_scale = in_width/count;
	var in_y_scale = in_height/(y_max-y_min);
	
	// free space surrounding the actual chart
	var pad = Math.round(y_size/12);
	
	send(&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;);
	send(svg(x_size, y_size));
	
	// background box	
	send(rect(1,1, x_size, y_size, &#x27;#C6F1C7&#x27;, &#x27;#C6F1C7&#x27;));
	
	// chart container box
	send(rect(pad,pad, x_size-(2*pad), y_size-(2*pad), &#x27;black&#x27;,&#x27;white&#x27;));

	// draw labels and grid
	var y_base = y_size - pad;
	var lastx = 0;
	var lasty = 0;
	for(var i=0; i&lt;count; i++) {
		var x = pad+Math.round(i*in_x_scale);
		if (i==0 || x-lastx &gt; (30+12*level)) {
			send(line(x, y_base+(pad/2), x, pad,&#x27;gray&#x27;));
			send(text(x+3, y_base + (pad/2), labels[i]));
			lastx = x;
		}	
		var y = Math.round(y_base - ( (values[i]-y_min) * in_y_scale));
		if (i==0 || lasty-y &gt; 15) {
			send(line(5, y, pad+in_width, y,&#x27;gray&#x27;));
			send(text(5, y-2, values[i]));
			lasty = y;
		}
	}
	// draw the actual graph
	send(&#x27;&lt;polyline style=&quot;stroke:black; stroke-width: &#x27;+ (4-level) +&#x27;; fill: none;&quot; points=&quot;&#x27;);
	for(var i=0; i&lt;count; i++) {
		if (i&gt;0) send(&#x27;,\n&#x27;);
		var x = pad+Math.round(i*in_x_scale);
		var y = Math.round(y_base - ( (values[i]-y_min) * in_y_scale));
		send( x + &#x27; &#x27; + y);
	}
	send(&#x27;&quot;/&gt;&#x27;);
	
	send(&#x27;&lt;/svg&gt;&#x27;);
}</code></pre>

<pre class="term">curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_list/chart-line/by_date?group_level=3 > chart-line_level-3.svg
curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_list/chart-line/by_date?group_level=2 > chart-line_level-2.svg
curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_list/chart-line/by_date?group_level=1 > chart-line_level-1.svg
</pre>
<p>
</p>
	

curl -v -d @data.json -X POST http://localhost:5984/graph-demo/_bulk_docs

echo -e "import test_data\ntest_data.print_couchdb('small-set',100)\n" | python  &gt; data.json

(echo -e "set terminal png size 500, 500\nplot \"-\" using 1:2 with lines notitle"; python test_data.py; echo -e "end") | gnuplot &gt; output.png

$ couchapp push charts http://localhost:5984/graph-demo

http://localhost:5984/graph-demo/_design/charts/index.html

http://localhost:5984/graph-demo/_design/charts/_view/simple

http://localhost:5984/graph-demo/_design/charts/_list/simple/simple

[1,5,7,4,9,3,5,1,8]

[{1,7},{3,9},{1,8}]
